generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum UserStatus {
  UNVERIFIED
  PENDING
  VERIFIED
  DENIED
}

enum ResidencyState {
  DRAFT
  PENDING
  APPROVED
  DENIED
  EXPIRED
}

enum SourceType {
  MANUAL
}

model User {
  id        Int        @id @default(autoincrement())
  discordId String     @unique
  status    UserStatus @default(UNVERIFIED)

  claims  ResidencyClaim[] @relation("UserClaims")
  decided ResidencyClaim[] @relation("DecidedBy")
  audits  AuditEvent[]     @relation("AuditActor")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResidencyClaim {
  id            Int            @id @default(autoincrement())
  userId        Int
  user          User           @relation("UserClaims", fields: [userId], references: [id], onDelete: Cascade)
  hall          String
  room          String
  term          String
  source        SourceType     @default(MANUAL)
  state         ResidencyState @default(DRAFT)
  submittedAt   DateTime?
  decidedAt     DateTime?
  decidedBy     Int?
  decidedByUser User?          @relation("DecidedBy", fields: [decidedBy], references: [id])
  denialReason  String?

  audits AuditEvent[] @relation("ClaimAudits")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditEvent {
  id          Int            @id @default(autoincrement())
  actorId     Int
  actor       User           @relation("AuditActor", fields: [actorId], references: [id])
  caseId      Int
  claim       ResidencyClaim @relation("ClaimAudits", fields: [caseId], references: [id])
  action      String
  payloadJSON Json
  timestamp   DateTime       @default(now())
}
